{"version":3,"file":"static/js/1015.28f735b8.chunk.js","mappings":"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","sources":["components/CustomSlider/CustomSlider.tsx","components/SearchBox/SearchBar.tsx","features/Chat/GroupChat/Components/ListMembers.tsx","features/Chat/GroupChat/Components/ListMessages.tsx","features/Chat/GroupChat/Components/ListRooms.tsx","features/Chat/GroupChat/Components/SendMessage.tsx","features/Chat/GroupChat/GroupChat.tsx"],"sourcesContent":["import React, { forwardRef, useState } from \"react\";\nimport Slider from \"react-slick\";\nimport \"slick-carousel/slick/slick.css\";\nimport \"slick-carousel/slick/slick-theme.css\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay } from \"@fortawesome/free-solid-svg-icons\";\nimport \"./CustomSlider.scss\";\nimport { CustomSliderProps } from \"../../types\";\nimport { Modal, ModalBody, ModalHeader } from \"reactstrap\";\nimport { Heading } from \"../Heading/Heading\";\nimport ReactPlayer from \"react-player\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nexport const CustomSlider = forwardRef<Slider, CustomSliderProps>((props, ref) => {\n  const { settings, items, className, isVideo } = props;\n  const [modal, setModal] = useState(false);\n  const [videoUrl, setVideoUrl] = useState<string | undefined>(undefined);\n  const [videoTitle, setTitle] = useState<string | undefined>(undefined);\n  const [embedUrl, setEmbededUrl] = useState<string | undefined>(undefined);\n  const toggle = () => {\n    setModal(!modal);\n  };\n  // let embedUrl: string | undefined = undefined;\n  const playVideo = (video: string | undefined, title: string | undefined) => {\n    setVideoUrl(video);\n    setTitle(title);\n    toggle();\n  };\n  const navigate = useNavigate();\n  return (\n    <div className=\"custom-slider-wrapper action-up-arrow\">\n      <Slider ref={ref} {...settings} className={className} >\n        {items &&\n          items.map((item, index) => {\n            return (\n              <div className={`item cursor-pointer ${item?.active ? 'chat-slider-active' : ''}`} key={`slide-${index}`} onClick={() => { if (props.clickCallback && item.room_id) props.clickCallback(item.room_id); }}>\n                {isVideo ? (\n                  <div className=\"video-wrapper\">\n                    {item.thumbnail ? (\n                      <div className=\"image-wrap\">\n                        <img\n                          src={item.thumbnail}\n                          alt={item?.alt}\n                          className=\"img-fluid\"\n                        />\n                        <a\n                          className=\"play-button\"\n                          onClick={() => playVideo(item.video, item.title)}\n                        >\n                          <FontAwesomeIcon icon={faPlay} />\n                        </a>\n                      </div>\n                    ) : (\n                      <div>\n                        <video\n                          className=\"w-100\"\n                          controls={false}\n                          playsInline\n                          src={item.video}\n                        ></video>\n                        <a\n                          className=\"play-button\"\n                          onClick={() => playVideo(item.video, item.title)}\n                        >\n                          <FontAwesomeIcon icon={faPlay} />\n                        </a>\n                      </div>\n                    )}\n                    {/* <video\n                    className=\"w-100\"\n                    controls={false}\n                    playsInline\n                    src={item.video}\n                  ></video>\n                  <a\n                    className=\"play-button\"\n                    onClick={() => playVideo(item.video)}\n                  >\n                    <FontAwesomeIcon icon={faPlay} />\n                  </a> */}\n                  </div>\n                ) : (item.isLink && item.url ? (\n                  <Link to={item.url} className={item?.active ? 'active' : ''}>\n                    <img src={item.image} alt={item?.alt} className=\"img-fluid\" />\n                  </Link>\n                ) : (\n                  <a onClick={() => navigate(`/chandlery`, {\n                    state: {\n                      chandlery_id: item.partner_id,\n                    },\n                  }\n                  )\n                  } target=\"_blank\" className={item?.active ? 'active' : ''}>\n                    <img src={item.image} alt={item?.alt} className=\"img-fluid\" />\n                  </a>)\n                )}\n                {item.title && <h6 className=\"itemlist-heading\">{item.title}</h6>}\n                {item.text && <p className=\"item-text\">{item.text}</p>}\n                {item.details && <p className=\"item-details\">{item.details}</p>}\n\n                {/* {item.title && <h6 className=\"itemlist-heading\">{item.text}</h6>}\n              {item.text && <p className=\"item-text\">{item.title}</p>}\n              {item.details && <p className=\"item-details\">{item.details}</p>} */}\n\n              </div>\n            )\n          })}\n      </Slider>\n      <div className=\"\">\n        <Modal\n          isOpen={modal}\n          toggle={toggle}\n          centered\n          className=\"videobox-modal\"\n        >\n          <ModalBody>\n            <ModalHeader toggle={toggle}>\n              <Heading tag=\"h3\" className=\"text-center\">\n                {videoTitle}\n              </Heading>\n            </ModalHeader>\n            <div className=\"video-player\">\n              <ReactPlayer url={videoUrl} controls={true} />\n            </div>\n          </ModalBody>\n        </Modal>\n      </div>\n    </div>\n  );\n});\nexport default CustomSlider;","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from '@fortawesome/free-solid-svg-icons';\nimport \"./searchbox.scss\";\n\ninterface searchBarProps {\n  onSearch?: (text: string) => void;\n}\n\nconst SearchBar = ({ onSearch }: searchBarProps) => {\n  const [query, setQuery] = useState('');\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(e.target.value);\n    if (onSearch) {\n      onSearch(e.target.value);\n    }\n  };\n  const handleSearch = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    //console.log('Search query:', query);\n  };\n\n  return (\n    <form>\n      <input\n        type=\"text\"\n        value={query}\n        onChange={handleInputChange}\n        placeholder=\"Search Members\"\n      />\n      <button type=\"submit\" className='btn btn-search'>\n        <FontAwesomeIcon icon={faSearch} />\n      </button>\n    </form>\n  );\n};\nexport default SearchBar;\n","import SearchBar from \"../../../../components/SearchBox/SearchBar\"\nimport \"../../../../components/chatDesign/ChatDesign.scss\";\nimport { useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { MemberInterface } from \"../../../../types/GroupChatInterfaces\";\nimport { getUserData } from \"../../../../utils/Utils\";\n\ninterface Props {\n    members: MemberInterface[];\n    toggleList?: boolean;\n}\n\nexport const ListMembers = ({ members, toggleList }: Props) => {\n    const baseUrl = process.env.REACT_APP_STORAGE_URL;\n    const [search, setSearch] = useState<string>('');\n    const navigate = useNavigate();\n    const userData = getUserData(\"userData\");\n\n    return (\n        <div className={`chat-section ${toggleList ? '' : 'd-none'}`} id=\"show_user_list\">\n            <div className=\"chat-search-area\">\n                <div className=\"chat-head-warapper\">\n                    <h5 className=\"chat-search-head\">{members.length} GUESTS IN THE ROOM</h5>\n                    <div className=\"search-area\">\n                        <SearchBar onSearch={setSearch} />\n                    </div>\n                </div>\n                <div className=\"search-results\">\n                    <ul>\n                        {userData && <li className=\"align-items-center d-flex\" key={userData.Member_id}>\n                            <div className=\"user-img cursor-pointer\" onClick={() => navigate(`/publicprofile`,\n                                {\n                                    state: userData.Member_id,\n                                })}>\n                                <img\n                                    src={userData.members_profile_picture ? userData.members_profile_picture : require(\"../../../../assets/images/profile/Default.jpg\")}\n                                    alt=\"Profile Image\"\n                                />\n                            </div>\n                            <label>You</label>\n                        </li>}\n                        {\n                            members?.filter(member => member.member_fname.toLowerCase().includes(search.toLowerCase()) || member.member_lname.toLowerCase().includes(search.toLowerCase()))\n                                .map((member) => {\n                                    return (\n                                        <li className=\"align-items-center d-flex\" key={member.member_id}>\n                                            <div className=\"user-img cursor-pointer\" onClick={() => navigate(`/publicprofile`,\n                                                {\n                                                    state: member.member_id,\n                                                })}>\n                                                <img\n                                                    src={member.member_profile_picture ? baseUrl + member.member_profile_picture : require(\"../../../../assets/images/profile/Default.jpg\")}\n                                                    alt=\"Profile Image\"\n                                                />\n                                            </div>\n                                            <label>{member.member_fname} {member.member_lname}</label>\n                                        </li>\n                                    );\n                                })\n                        }\n                    </ul>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { MessageInterface, ReactionInteface } from \"../../../../types/GroupChatInterfaces\";\nimport \"../../../../components/chatDesign/ChatDesign.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faClose, faDownload, faEdit, faEllipsis, faFile, faLongArrowAltDown, faReply, faThumbTack } from \"@fortawesome/free-solid-svg-icons\";\nimport { faTrashCan } from \"@fortawesome/free-regular-svg-icons\";\nimport { Modal, ModalBody, ModalHeader } from \"reactstrap\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { getUserData } from \"../../../../utils/Utils\";\nimport { MODAL_TYPES, useGlobalModalContext } from \"../../../../utils/GlobalModal\";\nimport React from \"react\";\nimport { useSocket } from \"../../../../contexts/SocketContext\";\nimport axios from 'axios';\nimport EmojiPicker, { EmojiClickData } from \"emoji-picker-react\";\nimport { useNavigate } from 'react-router-dom';\nimport twemoji from \"twemoji\";\n\ninterface Props {\n    messages: MessageInterface[];\n    deleteMessage: (message_id: string) => void;\n    handleSetReplyTo: (message: MessageInterface) => void;\n    chatAreaBlockRef: React.MutableRefObject<any>;\n    maxHeight: number;\n    setMessages: React.Dispatch<React.SetStateAction<MessageInterface[]>>;\n    roomId: number;\n    setIsReplyClicked: React.Dispatch<React.SetStateAction<boolean>>;\n    showLoader: boolean;\n    setShowLoader: React.Dispatch<React.SetStateAction<boolean>>;\n    replyAreaHeight: number;\n}\n\nconst user = getUserData(\"userData\");\nconst socketUrl: string = process.env.REACT_APP_SOCKET_URL as string;\nconst baseUrl: string = process.env.REACT_APP_STORAGE_URL as string;\n\nexport const ListMessages = ({ replyAreaHeight, showLoader, setShowLoader, setIsReplyClicked, roomId, handleSetReplyTo, chatAreaBlockRef, maxHeight }: Props) => {\n    const navigate = useNavigate();\n    const { socket } = useSocket();\n    const { showModal } = useGlobalModalContext();\n\n    const chatAreaInner = useRef<HTMLDivElement>(null);\n    const scrollToBottomRef = useRef<HTMLDivElement>(null);\n    const messageRefs = useRef<{ [key: string]: HTMLDivElement | null }>({});\n\n    const [messages, setMessages] = useState<MessageInterface[]>([]);\n    const [selectedMessage, setSelectedMessage] = useState<MessageInterface>();\n    const [pinnedMessage, setPinnedMessage] = useState<MessageInterface>();\n    const [hasLoadMessages, setHasLoadMessages] = useState<boolean>(true);\n    const [isLoadMessages, setIsLoadMessages] = useState<boolean>(false);\n    const [isModerator, setIsModerator] = useState<boolean>(false);\n    const [showEditReactionMsgId, setShowEditReactionMsgId] = useState<string>();\n    const [emojiMessageId, setEmojiMessageId] = useState<string>();\n    const [reactions, setReactions] = useState<ReactionsState>({});\n    const [selectedReactionId, setSelectedReactionId] = useState<string>();\n    const [openedImage, setOpenedImage] = useState<MessageInterface>();\n    interface ReactionsState {\n        [messageId: string]: { [emojiId: string]: ReactionInteface[] };\n    }\n\n    const editMessage = (message_id: string, edited_text: string) => {\n        if (socket?.connected && edited_text.trim() != '') {\n            socket.emit('editMessage', {\n                room_id: roomId, message_id, edited_text\n            });\n        }\n    }\n\n    const deleteMessage = (message_id: string) => {\n        if (socket) {\n            socket.emit('deleteMessage', {\n                room_id: roomId, message_id\n            });\n        }\n    }\n\n    const showDeleteMessageModal = (messageId: string) => {\n        showModal(MODAL_TYPES.CONFIRM_MODAL, {\n            title: \"Delete Message\",\n            details: \"Are you sure you want to delete message?\",\n            confirmBtn: \"DeleteMessage\",\n            messageId: messageId,\n            deleteMessage: (messageId: string) => {\n                deleteMessage(messageId);\n            }\n        });\n        setSelectedMessage(undefined);\n    };\n\n    useEffect(() => {\n        if (chatAreaInner.current) {\n            chatAreaInner.current.style.maxHeight = `${window.innerHeight - 300}px`;\n        }\n    }, []);\n\n    useEffect(() => {\n        setShowLoader(true);\n\n        if (scrollToBottomRef.current) {\n            scrollToBottomRef.current.style.display = 'none';\n        }\n    }, [roomId]);\n\n    const scrollToMessage = (message_id: string) => {\n        if (chatAreaInner.current) {\n            const element = messageRefs.current[message_id];\n\n            if (element) {\n                element.scrollIntoView({ behavior: 'smooth' });\n            } else {\n                if (socket?.connected && messages.length > 0 && hasLoadMessages) {\n                    setShowLoader(true);\n                    setIsLoadMessages(true);\n                    socket.emit('loadRoomMessagesUntilMessageId', {\n                        message_id: message_id,\n                        offset: messages.length,\n                        room_id: roomId\n                    });\n                }\n\n                let scrollInterval = setInterval(() => {\n                    const newElement = messageRefs.current[message_id];\n\n                    if (newElement) {\n                        newElement.scrollIntoView({ behavior: 'smooth' });\n                        clearInterval(scrollInterval);\n                    }\n                }, 200);\n            }\n        }\n    };\n\n    const handlePinMessage = (message: MessageInterface) => {\n        if (message == pinnedMessage) {\n            handleUnpinMessage();\n        } else {\n            if (socket?.connected) {\n                socket.emit('pinRoomMessage', { room_id: roomId, message_id: message.message_id });\n            }\n\n            setPinnedMessage(message);\n        }\n    };\n\n    const handleUnpinMessage = () => {\n        if (socket?.connected) {\n            socket.emit('unpinRoomMessages', { room_id: roomId });\n        }\n    };\n\n    const handleMessageScroll = () => {\n        if (chatAreaInner.current) {\n            const { scrollTop, clientHeight, scrollHeight } = chatAreaInner.current;\n\n            if (socket?.connected && scrollTop <= 0 && hasLoadMessages && !isLoadMessages) {\n                setShowLoader(true);\n                setIsLoadMessages(true);\n                socket.emit('loadRoomMessages', {\n                    offset: messages.length,\n                    room_id: roomId\n                });\n\n                chatAreaInner.current.scrollTop = 20;\n            }\n\n            if (scrollToBottomRef.current) {\n                if (scrollTop + clientHeight + 200 < scrollHeight) {\n                    scrollToBottomRef.current.style.display = 'block';\n                } else {\n                    scrollToBottomRef.current.style.display = 'none';\n                }\n            }\n        }\n    };\n\n    useEffect(() => {\n        if (!socket?.connected) return;\n\n        socket?.emit(\"joinRoom\", { member_id: user?.Member_id, room_id: roomId });\n\n        socket.on('loadRoomMessages', (messageData: MessageInterface[]) => {\n            setShowLoader(false);\n            setIsLoadMessages(false);\n\n            if (messageData.length == 0) {\n                setHasLoadMessages(false);\n                return;\n            } else {\n                setHasLoadMessages(true);\n            }\n\n            setMessages((prevMessages) => {\n                return [...messageData.reverse(), ...prevMessages]\n                    .filter((message, index, self) =>\n                        index === self.findIndex((msg) => msg.message_id == message.message_id))\n                    .sort((a: any, b: any) => a.message_id - b.message_id);\n            });\n\n            loadReactions(messageData);\n\n        });\n\n        socket.on('pinnedRoomMessage', (pinnedMessage: MessageInterface) => {\n            setPinnedMessage(pinnedMessage);\n        });\n\n        socket?.on('pinRoomMessage', (pinnedMsg) => {\n            let messageId = pinnedMsg.message_id;\n            if(messages){\n                let message = messages.find((msg:MessageInterface)=> msg.message_id === messageId); \n                setPinnedMessage(message);\n            }\n\t\t});\n\n        socket.on('unpinRoomMessages', ({ room_id }) => {\n            if (roomId == room_id) {\n                setPinnedMessage(undefined);\n            }\n        });\n\n        socket.on('roomModerator', (is_moderator: boolean) => {\n            setIsModerator(is_moderator);\n        });\n\n        socket.on('reaction', (data: ReactionInteface) => {\n            setReaction(data.message_id, data);\n        });\n\n        socket.on('loadReactions', (reactions: ReactionInteface[]) => {\n            reactions.map(reaction => {\n                setReaction(reaction.message_id, reaction);\n            });\n        });\n\n        socket.on('removeReaction', (reaction: ReactionInteface) => {\n            setReactions((prevReactions) => {\n                const newReactions = { ...prevReactions };\n\n                if (newReactions[reaction.message_id] && newReactions[reaction.message_id][reaction.emoji_id]) {\n                    newReactions[reaction.message_id][reaction.emoji_id] = newReactions[reaction.message_id][reaction.emoji_id].filter(\n                        (newReaction) => (newReaction.member_id != reaction.member_id)\n                    );\n                }\n\n                return newReactions;\n            });\n        });\n\n        socket.on('roomMessage', (message: MessageInterface) => {\n            setMessages((prevMessages) => [...prevMessages, message]);\n\n            setTimeout(() => {\n                scrollToBottom();\n            }, 100);\n        });\n\n        socket.on('roomMessages', (messages: MessageInterface[]) => {\n            setShowLoader(false);\n\n            if (messages.length == 0) {\n                setHasLoadMessages(false);\n            } else {\n                setHasLoadMessages(true);\n            }\n\n            setMessages(messages.reverse());\n            loadReactions(messages);\n\n            setTimeout(() => {\n                scrollToBottom();\n            }, 200);\n        });\n\n        return () => {\n            socket.off('loadRoomMessages');\n            socket.off('pinnedRoomMessage');\n            socket.off('unpinRoomMessages');\n            socket.off('roomModerator');\n            socket.off('reaction');\n            socket.off('loadReactions');\n            socket.off('removeReaction');\n            socket.off('roomMessage');\n            socket.off('roomMessages');\n        };\n    }, [socket, roomId]);\n\n    const downloadFile = (name: string, file: string | null) => {\n        if (!file) return;\n\n        axios.post(`${socketUrl}/download`, { file: file }, { responseType: 'blob' })\n            .then((response) => {\n                const url = window.URL.createObjectURL(new Blob([response.data]));\n                const link = document.createElement('a');\n                link.href = url;\n                link.setAttribute('download', name);\n                document.body.appendChild(link);\n                link.click();\n                link.remove();\n            }).catch((error) => {\n                console.error('Error downloading file:', error);\n            });\n    };\n\n    const scrollToBottom = () => {\n        if (chatAreaInner.current) {\n            chatAreaInner.current.scrollTo({\n                top: chatAreaInner.current.scrollHeight,\n                behavior: 'auto'\n            });\n\n            setTimeout(() => {\n                if (chatAreaInner.current) {\n                    const { scrollTop, clientHeight, scrollHeight } = chatAreaInner.current;\n\n                    if (scrollTop + clientHeight <= scrollHeight) {\n                        chatAreaInner.current.scrollIntoView({ behavior: 'smooth', block: 'center' });\n                    }\n                }\n            }, 600);\n        }\n    };\n\n    const imageExtensions = ['jpg', 'jpeg', 'png', 'gif', 'bmp', 'webp', 'svg'];\n    const videoExtensions = ['mp4', 'mov', 'avi', 'wmv', 'flv', 'mkv', 'webm'];\n\n    const getFormattedMessage = (message: MessageInterface) => {\n        let html;\n\n        if (message.file) {\n            const fileExtension = message.content.split('.').pop()?.toLowerCase();\n\n            if (fileExtension) {\n                if (imageExtensions.includes(fileExtension)) {\n                    html = (\n                        <div className=\"upload-img-box cursor-pointer\" onClick={() => setOpenedImage(message)} onDoubleClick={() => downloadFile(message.content, message.file)}>\n                            <img src={`${socketUrl}/group/file/${message.message_id}`} alt=\"image\" />\n                        </div>\n                    );\n                } else if (videoExtensions.includes(fileExtension)) {\n                    html = (\n                        <div className=\"upload-video-box\">\n                            <video width=\"100%\" controls>\n                                <source src={`${socketUrl}/group/stream/${message.message_id}`} type=\"video/mp4\" />\n                                Your browser does not support the video tag.\n                            </video>\n                        </div>\n                    );\n                } else {\n                    html = (\n                        <div className=\"d-flex align-items-center\">\n                            <div className=\"me-2\">\n                                <FontAwesomeIcon icon={faFile} style={{ fontSize: '25px' }} />\n                            </div>\n                            <div>{message.content}</div>\n                        </div>\n                    );\n                }\n            }\n        } else {\n            if (!message.emoji_replaced) {\n                message.content = replaceEmojis(message.content);\n                message.emoji_replaced = true;\n            }\n\n            html = (\n                <div\n                    id={`chat_message_div_${message.message_id}`}\n                    className=\"chat-input-text\"\n                    style={{ whiteSpace: \"pre-line\" }}\n                    dangerouslySetInnerHTML={{ __html: message.content }}\n                />\n            );\n        }\n\n        return (\n            <div ref={(element) => messageRefs.current[message.message_id] = element}>\n                {html}\n            </div >\n        );\n    }\n\n    const replaceEmojis = (text: string): string => {\n        return twemoji.parse(text, {\n            folder: 'emoji',\n            ext: '.png',\n            base: socketUrl + '/',\n        });\n    };\n\n    const replaceImgToEmojis = (element: HTMLElement) => {\n        const images = element.getElementsByTagName('img');\n\n        for (let i = images.length - 1; i >= 0; i--) {\n            const altText = images[i].alt;\n            const imgNode = images[i];\n            const textNode = document.createTextNode(altText);\n            imgNode.parentNode?.replaceChild(textNode, imgNode);\n        }\n    };\n\n    useEffect(() => {\n        if (scrollToBottomRef.current) {\n            scrollToBottomRef.current.style.bottom = `${replyAreaHeight}px`;\n            scrollToBottomRef.current.style.marginTop = `-38px`;\n        }\n    }, [replyAreaHeight]);\n\n    const handleSetEdit = (message: MessageInterface) => {\n        const messageId = message.message_id;\n\n        const messageElement = document.getElementById(`chat_message_div_${messageId}`);\n        const button = document.getElementById(`chat_message_button_${messageId}`);\n        const editButton = document.getElementById(`edit_${messageId}`);\n\n        if (editButton) {\n            editButton.classList.add('d-none');\n        }\n\n        if (messageElement) {\n            replaceImgToEmojis(messageElement);\n            messageElement.contentEditable = 'true';\n            messageElement.focus();\n\n            const range = document.createRange();\n            const selection = window.getSelection();\n\n            if (range && selection) {\n                range.selectNodeContents(messageElement);\n                range.collapse(false);\n                selection.removeAllRanges();\n                selection.addRange(range);\n            }\n        }\n\n        if (button) {\n            button.classList.remove('d-none');\n        }\n    };\n\n    const handleResetEdit = (messageId: string, message: string | undefined = undefined) => {\n        const messageElement = document.getElementById(`chat_message_div_${messageId}`);\n        const button = document.getElementById(`chat_message_button_${messageId}`);\n        const editButton = document.getElementById(`edit_${messageId}`);\n\n        if (editButton) {\n            editButton.classList.remove('d-none');\n        }\n\n        if (messageElement) {\n            messageElement.contentEditable = 'false';\n            const messageObject: MessageInterface | undefined = messages.find(message => message.message_id == messageId) ?? undefined;\n\n            if (messageObject) {\n                if (message) {\n                    messageObject.content = message ?? messageObject.content;\n                }\n\n                messageElement.innerHTML = messageObject.content;\n            }\n        }\n\n        if (button) {\n            button.classList.add('d-none');\n        }\n    };\n\n    const handleSaveEdit = (message: MessageInterface) => {\n        const messageId = message.message_id;\n        const messageElement = document.getElementById(`chat_message_div_${messageId}`);\n\n        if (messageElement) {\n            const editedText = messageElement.innerText;\n\n            if (editedText.trim() != '') {\n                editMessage(messageId, editedText);\n                handleResetEdit(messageId, replaceEmojis(editedText));\n            }\n        }\n    };\n\n    const clickEditReaction = (messageId: string, emojiData: EmojiClickData) => {\n        const messageElement = document.getElementById(`chat_message_div_${messageId}`);\n\n        if (messageElement) {\n            messageElement.innerText += emojiData.emoji;\n        }\n    };\n\n    const handleReactionClick = (emojiData: EmojiClickData) => {\n        if (socket?.connected && emojiData.emoji && emojiData.unified) {\n            socket.emit('reaction', {\n                room_id: roomId,\n                message_id: emojiMessageId,\n                reaction: emojiData.emoji,\n                emoji_id: emojiData.unified\n            });\n\n            setEmojiMessageId(undefined);\n        }\n    };\n\n    const handleSetEmojiMessageId = (message_id: string) => {\n        if (emojiMessageId == message_id) {\n            setEmojiMessageId(undefined);\n        } else {\n            setEmojiMessageId(message_id);\n        }\n    };\n\n    const setReaction = (messageId: string, reaction: ReactionInteface) => {\n        setReactions((prevReactions) => {\n            const newReactions = { ...prevReactions };\n\n            if (!newReactions[messageId]) {\n                newReactions[messageId] = {};\n            }\n\n            if (!newReactions[messageId][reaction.emoji_id]) {\n                newReactions[messageId][reaction.emoji_id] = [];\n            }\n\n            if (!newReactions[messageId][reaction.emoji_id].find((currentReaction) => currentReaction.reaction_id == reaction.reaction_id))\n                newReactions[messageId][reaction.emoji_id].push(reaction);\n\n            return newReactions;\n        });\n    };\n\n    useEffect(() => {\n        const handleMouseDown = (event: MouseEvent) => {\n            if (emojiMessageId) {\n                const emoji_picker = document.getElementById(`emoji_picker_${emojiMessageId}`);\n                const emoji_picker_btn = document.getElementById(`emoji_picker_btn_${emojiMessageId}`);\n\n                if (emoji_picker && emoji_picker_btn && !emoji_picker_btn.contains(event.target as Node) && !emoji_picker.contains(event.target as Node)) {\n                    setEmojiMessageId(undefined);\n                }\n            }\n        };\n\n        document.addEventListener('mousedown', handleMouseDown);\n\n        return () => {\n            document.removeEventListener('mousedown', handleMouseDown);\n        };\n    }, [emojiMessageId]);\n\n    const loadReactions = (messages: MessageInterface[]) => {\n        const messageIds = messages.map(message => message.message_id);\n\n        if (socket?.connected) {\n            socket.emit('loadReactions', messageIds);\n        }\n    };\n\n    const handleSetShowEditReactionMsgId = (messageId: string) => {\n        setShowEditReactionMsgId((preValue) => {\n            return preValue == messageId ? undefined : messageId;\n        });\n    };\n\n    const handleReactionDetails = (reactions: ReactionInteface[]) => {\n        if (selectedReactionId) {\n            setSelectedReactionId(undefined);\n            return;\n        }\n\n        setSelectedReactionId(reactions[0].reaction_id);\n    };\n\n    document.addEventListener('click', function (event: MouseEvent) {\n        const target = event.target as HTMLElement | null;\n\n        if (target && !target.closest('.emoji-reactions')) {\n            setSelectedReactionId(undefined);\n        }\n\n        if (target && !target.closest('.update-emoji')) {\n            setShowEditReactionMsgId(undefined);\n        }\n    });\n\n    let messageDate = '';\n\n    return (\n        <>\n            <div\n                className={`pin-message ${pinnedMessage ? '' : 'd-none'}`}\n                onClick={() => pinnedMessage && scrollToMessage(pinnedMessage.message_id)}\n            >\n                <span className={`close-icon ${isModerator ? '' : 'd-none'}`}>\n                    <FontAwesomeIcon icon={faClose} onClick={handleUnpinMessage} />\n                </span>\n                <div className=\"align-items-center d-flex message-block\">\n                    <span className=\"icon\"><FontAwesomeIcon icon={faThumbTack} /></span>\n                    <div className=\"pin-message-text\" dangerouslySetInnerHTML={{ __html: pinnedMessage?.content ?? '' }} style={{ whiteSpace: \"pre-line\" }} />\n                </div>\n            </div>\n            <div className={`chat-area-block ${pinnedMessage ? 'top-active' : ''}`} ref={chatAreaBlockRef}>\n                <div className={`chat-laoder ${showLoader ? '' : 'd-none'}`}></div>\n                <div className=\"container-fluid chat-area-inner\" ref={chatAreaInner} onScroll={handleMessageScroll}>\n                    {messages.length === 0 &&(\n                        <div className=\"align-items-center text-center\">\n                            <p>\n                                {'No messages yet. Start a new conversation!'}\n                                </p>\n                        </div>\n                    )}\n                    {\n                        messages?.map((message) => {\n                            const date = new Date(message.timestamp);\n                            const timeString = date.toLocaleTimeString('en-US', {\n                                hour: '2-digit',\n                                minute: '2-digit',\n                                hour12: true,\n                            });\n\n                            const dateString = date.toLocaleDateString('en-GB', {\n                                day: '2-digit',\n                                month: 'long',\n                                year: 'numeric'\n                            }).replace(/ /g, ' ');\n\n                            return (\n                                <div id={`message_div_${message.message_id}`} key={message.message_id}>\n                                    {messageDate != dateString && (messageDate = dateString) && <div className=\"divider\">\n                                        <span>{dateString}</span>\n                                    </div>}\n                                    <div className={`chat-part flex-wrap ${message.member_id == user?.Member_id ? 'chat-reply d-flex' : 'd-lg-flex d-md-flex'}`}>\n                                        <div className={message.member_id == user?.Member_id ? 'd-none' : 'pro-area-wrapper'}>\n                                            <div className=\"pro-area\">\n                                                <div className=\"pro-img cursor-pointer\" onClick={() => navigate(`/publicprofile`,\n                                                    {\n                                                        state: message.member_id,\n                                                    })}>\n                                                    <img\n                                                        src={message.member_profile_picture ? baseUrl + message.member_profile_picture : require(\"../../../../assets/images/profile/Default.jpg\")}\n                                                        alt=\"Profile Image\"\n                                                    />\n                                                </div>\n                                                <label>\n                                                    {message.member_fname} {message.member_lname}\n                                                </label>\n                                            </div>\n                                            <span className=\"time d-lg-none d-md-none\">\n                                                {timeString}\n                                            </span>\n                                        </div>\n                                        <div className={`right-area ${message.member_id == user?.Member_id ? 'order-1 order-md-0 order-lg-0 order-xl-0 order-xxl-0 d-md-flex d-block align-items-start new-updates-rightarea' : ' '}`}>\n                                            <div className=\"profile-updates d-flex align-items-baseline justify-content-between\">\n                                                {/*  */}\n                                                <div className={message.member_id == user?.Member_id ? 'pro-area-wrapper' : 'd-none'}>\n                                                    <div className={`pro-area ${message.member_id == user?.Member_id ? 'order-0 order-md-1 order-lg-1 order-xl-1 order-xxl-1' : ''}`}>\n                                                        <div className=\"pro-img cursor-pointer\" onClick={() => navigate(`/publicprofile`,\n                                                            {\n                                                                state: message.member_id,\n                                                            })}>\n                                                            <img\n                                                                src={message.member_profile_picture ? baseUrl + message.member_profile_picture : require(\"../../../../assets/images/profile/Default.jpg\")}\n                                                                alt=\"Profile Image\"\n                                                            />\n                                                        </div>\n                                                        <label>\n                                                            {message.member_fname} {message.member_lname}\n                                                        </label>\n                                                    </div>\n                                                    <span className=\"time d-lg-none d-md-none\">\n                                                        {timeString}\n                                                    </span>\n                                                </div>\n                                                <div className=\"action-box-new new-updates\">\n                                                    {user?.Member_id == message.member_id && (\n                                                        <>\n                                                            <div>\n                                                                {message.file ?\n                                                                    (<div id={`download_${message.message_id}`} className=\"action-box icon-box icon-none\" onClick={() => downloadFile(message.content, message.file)}>\n                                                                        <span className=\"icon\"><FontAwesomeIcon icon={faDownload} /></span>\n                                                                    </div>) : (<div id={`edit_${message.message_id}`} className=\"action-box icon-box icon-none\" onClick={() => handleSetEdit(message)}>\n                                                                        <span className=\"icon\"><FontAwesomeIcon icon={faEdit} /></span>\n                                                                    </div>)\n                                                                }\n                                                                <div className=\"action-box icon-box icon-none\" onClick={() => { showDeleteMessageModal(message.message_id) }}>\n                                                                    <span className=\"icon\"><FontAwesomeIcon icon={faTrashCan} /></span>\n                                                                </div>\n                                                            </div>\n                                                            <div className={`reply-newypdates d-md-flex align-items-center d-sm-none justify-content-end flex-md-column ${user?.Member_id == message.member_id ? 'ms-0' : 'justify-content-end'}`}>\n                                                                <div className=\"action-box\" onClick={() => { handleSetReplyTo(message); setIsReplyClicked(true); }}>\n                                                                    <span className=\"icon icon-replay\"><FontAwesomeIcon icon={faReply} /></span>\n                                                                </div>\n                                                                <div id={`emoji_picker_btn_${message.message_id}`} className=\"action-box icon-box ms-0\" onClick={() => handleSetEmojiMessageId(message.message_id)}>\n                                                                    <div className=\"img-block\">\n                                                                        <img src={require(\"../../../../assets/images/chat/smile.png\")} alt=\"Icons\" />\n                                                                    </div>\n                                                                </div>\n                                                            </div>\n                                                        </>\n                                                    )}\n                                                </div>\n                                                {/*  */}\n                                            </div>\n                                            <div className={`chat mx-2 w-100 ${(pinnedMessage?.message_id == message.message_id) ? 'pin' : ''}`}>\n                                                {\n                                                    message.reply_of ? (<div className=\"reply-chat\" onClick={() => { if (message.reply_of) scrollToMessage(message.reply_of); }}>\n                                                        <span>Replying to:</span>\n                                                        {message.reply_of_file && (\n                                                            <div className=\"file-download d-flex align-items-center\">\n                                                                <span className=\"upload-icon\"><FontAwesomeIcon icon={faFile} /></span>\n                                                                <span>{message.reply_of_content}</span>\n                                                            </div>\n                                                        )}\n                                                        <h5>{`${message.reply_of_member_fname} ${message.reply_of_member_lname}`}</h5>\n                                                        <div className=\"chat-replay-text\" dangerouslySetInnerHTML={{ __html: (message.reply_of_content ?? '') }} style={{ whiteSpace: \"pre-line\" }} /></div>) : ''\n                                                }\n                                                {getFormattedMessage(message)}\n                                                <div className=\"d-flex align-items-center justify-content-end mt-3\">\n                                                    {isModerator && (<span className={`icon-pin ${(pinnedMessage?.message_id == message.message_id) ? 'pin-active' : ''}`} onClick={() => handlePinMessage(message)}>\n                                                        <FontAwesomeIcon icon={faThumbTack} />\n                                                    </span>)}\n                                                    <div id={`chat_message_button_${message.message_id}`} className=\"inner-action d-flex flex-fill d-none\">\n                                                        <div className=\"update-emoji me-1\" onClick={() => handleSetShowEditReactionMsgId(message.message_id)}>\n                                                            <img src={require(\"../../../../assets/images/chat/smile.png\")} alt=\"Icons\" />\n                                                        </div>\n                                                        {showEditReactionMsgId == message.message_id && <div id={`edit_reaction_${message.message_id}`} className=\"edit-emoji-actions\">\n                                                            <EmojiPicker lazyLoadEmojis={true} skinTonesDisabled={true} onEmojiClick={(emojiData: EmojiClickData) => clickEditReaction(message.message_id, emojiData)} />\n                                                        </div>}\n                                                        <button className=\"btn btn-cancel me-1\" onClick={() => handleResetEdit(message.message_id)}>Cancel</button>\n                                                        <button className=\"btn btn-update\" onClick={() => handleSaveEdit(message)}>Update</button>\n                                                    </div>\n                                                    <span className=\"time flex-md-fill flex-lg-fill d-md-flex d-lg-flex justify-content-start\">\n                                                        {timeString}\n                                                    </span>\n                                                    <div className=\"emoji-reactions-outer d-flex\">\n                                                        {Object.keys(reactions[message.message_id] ?? [])?.map((emojiId) => (\n                                                            reactions[message.message_id][emojiId].length > 0 && (<div className=\"emoji-reactions d-flex cursor-pointer\" key={emojiId} onClick={() => handleReactionDetails(reactions[message.message_id][emojiId])}>\n                                                                <span><img style={{ width: \"18px\" }} alt={reactions[message.message_id][emojiId][0]?.reaction ?? \"emoji\"} draggable=\"false\" src={`${socketUrl}/emoji/${reactions[message.message_id][emojiId][0]?.emoji_id}.png`}></img></span>\n                                                                <label className=\"ms-2\">{reactions[message.message_id][emojiId].length}</label>\n                                                                {selectedReactionId == reactions[message.message_id][emojiId][0].reaction_id && <div className=\"list-wrapper\">\n                                                                    <div className=\"list-area\">\n                                                                        <ul>\n                                                                            {\n                                                                                reactions[message.message_id][emojiId].map(reaction => {\n                                                                                    return (\n                                                                                        <li className=\"align-items-center d-flex\" key={reaction.member_id}>\n                                                                                            <span>\n                                                                                                <img src={reaction.member_profile_picture ? baseUrl + reaction.member_profile_picture : require(\"../../../../assets/images/profile/Default.jpg\")} alt=\"Member Pic\" />\n                                                                                            </span>\n                                                                                            <label>{user?.Member_id == reaction.member_id ? 'You' : `${reaction.member_fname} ${reaction.member_lname}`}</label>\n                                                                                        </li>\n                                                                                    );\n                                                                                })\n                                                                            }\n                                                                        </ul>\n                                                                    </div>\n                                                                </div>}\n                                                            </div>)\n                                                        ))}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                            <div className={`action-area ms-2 d-flex align-items-end justify-content-end flex-md-column  ${user?.Member_id == message.member_id ? 'ms-0' : 'justify-content-end'}`}>\n                                                <div className=\"action-box me-0\" onClick={() => { handleSetReplyTo(message); setIsReplyClicked(true); }}>\n                                                    <span className=\"icon icon-replay\"><FontAwesomeIcon icon={faReply} /></span>\n                                                    <label>Reply</label>\n                                                </div>\n                                                <div className=\"d-flex align-items-center justify-content-center\">\n                                                    {message.file && <div id={`emoji_picker_btn_${message.message_id}`} className=\"action-box icon-box ms-2 me-1\" onClick={() => downloadFile(message.content, message.file)}>\n                                                        <div className=\"d-flex align-items-center justify-content-center\">\n                                                            <span className=\"icon icon-replay me-0 \"><FontAwesomeIcon icon={faDownload} /></span>\n                                                        </div>\n                                                    </div>}\n                                                    <div id={`emoji_picker_btn_${message.message_id}`} className=\"download-action action-box icon-box ms-0\" onClick={() => handleSetEmojiMessageId(message.message_id)}>\n                                                        <div className=\"img-block\">\n                                                            <img src={require(\"../../../../assets/images/chat/smile.png\")} alt=\"Icons\" />\n                                                        </div>\n                                                    </div>\n                                                </div>\n                                                {user?.Member_id == message.member_id && (\n                                                    <div className=\"action-box d-lg-none d-md-none icon-box\" id=\"action\" onClick={() => setSelectedMessage(message)}>\n                                                        <span className=\"icon\"><FontAwesomeIcon icon={faEllipsis} /></span>\n                                                    </div>\n                                                )}\n                                                {/* {user?.Member_id == message.member_id && (\n                                                    <>\n                                                        {!message.file && (<div id={`edit_${message.message_id}`} className=\"action-box icon-box icon-none\" onClick={() => handleSetEdit(message)}>\n                                                            <span className=\"icon\"><FontAwesomeIcon icon={faEdit} /></span>\n                                                        </div>)}\n                                                        <div className=\"action-box icon-box icon-none\" onClick={() => { showDeleteMessageModal(message.message_id) }}>\n                                                            <span className=\"icon\"><FontAwesomeIcon icon={faTrashCan} /></span>\n                                                        </div>\n                                                        <div className=\"action-box d-lg-none d-md-none icon-box\" id=\"action\" onClick={() => setSelectedMessage(message)}>\n                                                            <span className=\"icon\"><FontAwesomeIcon icon={faEllipsis} /></span>\n                                                        </div>\n                                                    </>\n                                                )} */}\n                                            </div>\n                                            <div className=\"e-picker-wrap\">\n                                                <div id={`emoji_picker_${message.message_id}`} className={emojiMessageId == message.message_id ? \"\" : \"d-none\"}>\n                                                    <div className={message.member_id == user?.Member_id ? \"d-flex justify-content-end d-md-flex e-picker justify-content-md-start mt-2\" : \"e-picker mt-2 d-flex justify-content-end\"}>\n                                                        {emojiMessageId == message.message_id && <EmojiPicker lazyLoadEmojis={false} allowExpandReactions={false} reactionsDefaultOpen={true} onReactionClick={handleReactionClick} />}\n                                                    </div>\n                                                </div>\n                                            </div>\n                                        </div>\n                                        {/* <div className={message.member_id == user?.Member_id ? 'pro-area-wrapper' : 'd-none'}>\n                                            <div className={`pro-area ${message.member_id == user?.Member_id ? 'order-2 order-md-1 order-lg-1 order-xl-1 order-xxl-1' : ''}`}>\n                                                <div className=\"pro-img cursor-pointer\" onClick={() => navigate(`/publicProfile/${message.member_id}`)}>\n                                                    <img\n                                                        src={message.member_profile_picture ? baseUrl + message.member_profile_picture : require(\"../../../../../assets/images/profile/Default.jpg\")}\n                                                        alt=\"Profile Image\"\n                                                    />\n                                                </div>\n                                                <label>\n                                                    {message.member_fname} {message.member_lname}\n                                                </label>\n                                            </div>\n                                            <span className=\"time d-lg-none d-md-none\">\n                                                {timeString}\n                                            </span>\n                                        </div> */}\n                                    </div>\n                                </div>\n                            );\n                        })\n                    }\n                </div>\n                <div ref={scrollToBottomRef} onClick={scrollToBottom} className=\"backtobottom cursor-pointer\" style={{ display: 'none' }}>\n                    <span><FontAwesomeIcon icon={faLongArrowAltDown} /></span> Scroll to Bottom\n                </div>\n                <Modal isOpen={selectedMessage ? true : false} toggle={() => setSelectedMessage(undefined)} centered className=\"action-modal-container\">\n                    <ModalBody>\n                        <ModalHeader />\n                        <div className=\"action-modal\">\n                            <h5>My Post</h5>\n                            {!selectedMessage?.file && (<a onClick={() => { if (selectedMessage) { handleSetEdit(selectedMessage); setSelectedMessage(undefined); } }}><span><FontAwesomeIcon icon={faEdit} /></span>Edit Post</a>)}\n                            <a onClick={() => { if (selectedMessage) { showDeleteMessageModal(selectedMessage.message_id) } }}><span><FontAwesomeIcon icon={faTrashCan} /></span>Delete Post</a>\n                        </div>\n                    </ModalBody>\n                </Modal>\n            </div>\n            <div>\n                {openedImage &&\n                    < Modal\n                        isOpen={true} centered className=\"chat-viewModal\">\n                        <ModalBody>\n                            <ModalHeader toggle={() => setOpenedImage(undefined)}>\n                                <div className=\"me-2 cursor-pointer\" onClick={() => downloadFile(openedImage.content, openedImage.file)}>\n                                    <FontAwesomeIcon icon={faDownload} style={{ fontSize: '25px' }} />\n                                </div>\n                            </ModalHeader>\n                            <div className=\"action-modal\">\n                                <img\n                                    src={`${socketUrl}/group/file/${openedImage.message_id}`}\n                                    alt=\"image\"\n                                    className=\"modal-image w-100 img-fluid\"\n                                />\n                            </div>\n                        </ModalBody>\n                    </Modal >\n                }\n            </div>\n        </>\n    );\n}\n","import { MemberInterface, MessageInterface, RoomInterface } from \"../../../../types/GroupChatInterfaces\";\nimport \"../../../../components/chatDesign/ChatDesign.scss\";\nimport { CustomSlider } from \"../../../../components/CustomSlider/CustomSlider\";\n// import ChatLoader from \"../../../../../components/Loader/ChatLoader\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Slider from \"react-slick\";\ninterface Props {\n    roomId: string;\n    rooms: RoomInterface[];\n    members: MemberInterface[];\n    handleshowUsers: () => void;\n    messages: MessageInterface[];\n    setMessages: React.Dispatch<React.SetStateAction<MessageInterface[]>>;\n    setShowLoader: React.Dispatch<React.SetStateAction<boolean>>;\n}\ntype SliderRef = Slider & { slickGoTo: (index: number) => void };\n\nexport const ListRooms = (data: Props) => {\n    const rooms = data.rooms;\n    const members = data.members;\n    const handleshowUsers = data.handleshowUsers;\n    const baseUrl = process.env.REACT_APP_STORAGE_URL;\n    const navigate = useNavigate();\n    const sliderRef = useRef<SliderRef | null>(null);\n\n    useEffect(() => {\n        const activeElement = document.querySelector('.chat-slider-active');\n        var currentIndex: any = activeElement?.parentElement?.parentElement?.dataset.index;\n        var totalIndex: any = document.querySelectorAll('.slick-slide').length;\n        if (activeElement && sliderRef.current) {\n            sliderRef.current?.slickGoTo((totalIndex - 6 < currentIndex) ? totalIndex - 6 : currentIndex);\n        }\n\n        const mediaQuery = window.matchMedia('(max-width:767px)');\n        if (mediaQuery.matches && activeElement && sliderRef.current) {\n            sliderRef.current?.slickGoTo((totalIndex - 4 < currentIndex) ? totalIndex - 4 : currentIndex);\n        }\n    }, [rooms]);\n\n    const slidesettings = {\n        dots: false,\n        infinite: false,\n        slidesToShow: 6,\n        // slidesToShow: rooms.length > 7 ? 7 : rooms.length,\n        slidesToScroll: 1,\n        draggable: false,\n        variableWidth: false,\n        centerPadding: \"0\",\n\n        responsive: [\n            {\n                breakpoint: 1200,\n                settings: {\n                    arrows: false,\n                    centerPadding: \"0px\",\n                    slidesToShow: 4,\n                    variableWidth: true,\n                },\n            },\n            {\n                breakpoint: 992,\n                settings: {\n                    arrows: false,\n                    centerPadding: \"0px\",\n                    slidesToShow: 4,\n                    variableWidth: true,\n                },\n            },\n            {\n                breakpoint: 640,\n                settings: {\n                    arrows: false,\n                    centerPadding: \"0\",\n                    slidesToShow: 4,\n                    variableWidth: true,\n                },\n            },\n            {\n                breakpoint: 480,\n                settings: {\n                    arrows: false,\n                    centerPadding: \"0\",\n                    slidesToShow: 3,\n                    variableWidth: true,\n                },\n            },\n        ],\n    };\n\n    const formatRoomNames = (rooms: RoomInterface[]): RoomInterface[] => {\n        rooms.map(room => {\n            room.room_name = room.room_name.split(' ').map(word => {\n                return word.trim().charAt(0).toUpperCase() + word.slice(1).toLowerCase();\n            }).join(' ');\n\n            return room;\n        });\n\n        return rooms;\n    };\n\n    const slides = formatRoomNames(rooms).map(room => ({\n        image: baseUrl + room.room_image,\n        alt: 'Club Image',\n        title: room.room_name,\n        active: (room.room_id == data.roomId),\n        url: window.location.origin + '/group-chat/' + room.room_id,\n        isLink: true,\n        room_id: room.room_id\n    }));\n\n    const handleChangeGroup = (roomId: string) => {\n        navigate('/group-chat/' + roomId);\n    }\n\n    const sliderClass = rooms.length < 4 ? 'slick-slider-wrapper few-items' : 'slick-slider-wrapper';\n    return (\n        <>\n            <div className={rooms.length > 0 ? \"chat-slider-block\" : \"d-none\"}>\n                <div className=\"container-fluid inner-slider-block\">\n                    <div className={`chat-slider ${sliderClass}`}>\n\n                        <CustomSlider clickCallback={handleChangeGroup} settings={slidesettings} items={slides} ref={sliderRef} />\n                    </div>\n                </div>\n            </div>\n            <div className=\"room-container d-lg-none d-md-none\" id=\"show_users\" onClick={handleshowUsers}>\n                <h5 className=\"chat-search-head\">{members.length} GUESTS IN THE ROOM</h5>\n            </div>\n        </>\n    );\n}\n","import \"../../../../components/chatDesign/ChatDesign.scss\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { MemberInterface, replyInterface } from \"../../../../types/GroupChatInterfaces\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faClose, faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { useSocket } from \"../../../../contexts/SocketContext\";\nimport { getUserData } from \"../../../../utils/Utils\";\nimport EmojiPicker, { EmojiClickData } from \"emoji-picker-react\";\n\ninterface Props {\n    sendTextMessage: (message: string) => void;\n    replyTo: replyInterface | undefined;\n    setReplyTo: React.Dispatch<React.SetStateAction<replyInterface | undefined>>\n    replyAreaRef: React.MutableRefObject<any>;\n    roomId: number;\n    isReplyClicked: boolean;\n    setIsReplyClicked: React.Dispatch<React.SetStateAction<boolean>>;\n    setShowLoader: React.Dispatch<React.SetStateAction<boolean>>;\n    setReplyAreaHeight: React.Dispatch<React.SetStateAction<number>>;\n}\n\nconst socketUrl: string = process.env.REACT_APP_SOCKET_URL as string;\n\nexport const SendMessage: React.FC<Props> = ({ setReplyAreaHeight, setShowLoader, setIsReplyClicked, isReplyClicked, roomId, sendTextMessage, setReplyTo, replyTo, replyAreaRef }) => {\n    const { socket, isConnected } = useSocket();\n    const user = getUserData(\"userData\");\n    const [showEmoji, setShowEmoji] = useState<boolean>(false);\n    const inputFileRef = useRef<HTMLInputElement>(null);\n\n    const sendData = () => {\n        if (inputDiv.current) {\n            const message = inputDiv.current.innerText;\n\n            if (message != '') {\n                sendTextMessage(message);\n                inputDiv.current.innerHTML = '';\n            }\n        }\n    };\n\n    const handleTextInputKeyDown = (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === 'Enter') {\n            if (!event.shiftKey) {\n                event.preventDefault();\n                sendData();\n            }\n        }\n\n        clearTimeout(typingTimeout);\n\n        if (socket?.connected) {\n            socket.emit('roomTyping', { room_id: roomId });\n        }\n    };\n\n    const [typingMember, setTypingMember] = useState<MemberInterface>();\n\n    useEffect(() => {\n        if (!socket?.connected) return;\n\n        socket.on('roomTyping', (typingMember: MemberInterface) => {\n            if (user?.Member_id != typingMember.member_id) {\n                setTypingMember(typingMember);\n            }\n        });\n\n        socket.on('stopRoomTyping', (typingMember: MemberInterface) => {\n            setTypingMember(undefined);\n        });\n    }, [isConnected, user]);\n\n    let typingTimeout: any;\n\n    const handleTextInputKeyUp = () => {\n        clearTimeout(typingTimeout);\n\n        typingTimeout = setTimeout(() => {\n            if (socket?.connected) {\n                socket.emit('stopRoomTyping', { room_id: roomId });\n            }\n        }, 500);\n    };\n\n    useEffect(() => {\n        if (inputDiv.current) {\n            inputDiv.current.focus();\n        }\n    }, [isReplyClicked]);\n\n    useEffect(() => {\n        if (inputDiv.current) {\n            inputDiv.current.innerHTML = '';\n            inputDiv.current.focus();\n        }\n    }, [roomId]);\n\n    const sendFiles = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setShowLoader(true);\n\n        if (socket?.connected) {\n            const files = event.target.files;\n\n            if (files && files.length > 0) {\n                const filesData: any[] = [];\n\n                Array.from(files).forEach((file) => {\n                    const reader = new FileReader();\n\n                    reader.onload = () => {\n                        filesData.push({ file_data: reader.result, original_name: file.name });\n\n                        if (filesData.length === files.length) {\n                            socket.emit('roomFiles', { \n                                filesData: filesData, \n                                data: { \n                                    room_id: roomId, \n                                    reply_of: replyTo || null \n                                } \n                            });\n                        }\n                    };\n\n                    setReplyTo(undefined)\n                    reader.readAsArrayBuffer(file);\n                });\n            }\n        }\n    };\n\n    const emojiPickerRef = useRef<HTMLDivElement | null>(null);\n    const pickerButtonRef = useRef<HTMLDivElement | null>(null);\n\n    document.addEventListener('mousedown', (event: MouseEvent) => {\n        if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target as Node)) {\n            setShowEmoji(false);\n        }\n    });\n\n    const handleShowPicker = () => {\n        if (pickerButtonRef.current && emojiPickerRef.current) {\n            const buttonRect = pickerButtonRef.current.getBoundingClientRect();\n\n            if ((buttonRect.bottom + 300) > window.innerHeight) {\n                emojiPickerRef.current.style.bottom = '35px';\n                emojiPickerRef.current.style.top = 'inherit';\n            } else {\n                emojiPickerRef.current.style.bottom = 'inherit';\n                emojiPickerRef.current.style.top = '35px';\n            }\n        }\n\n        setShowEmoji(true);\n    };\n\n    const inputDiv = useRef<HTMLDivElement>(null);\n\n    const selectEmoji = (emojiData: EmojiClickData) => {\n        // const data = `<img alt=\"${emojiData.emoji}\" draggable=\"false\" src=\"${socketUrl}/emoji/${emojiData.unified}\"></img>`;\n        const data = emojiData.emoji;\n\n        if (inputDiv.current) {\n            inputDiv.current.innerHTML = inputDiv.current.innerHTML + data;\n        }\n    };\n\n    useEffect(() => {\n        if (replyAreaRef.current) {\n            setReplyAreaHeight(replyAreaRef.current.clientHeight);\n        }\n    }, []);\n\n    return (\n        <div className=\"replay-area\" ref={replyAreaRef}>\n            <div className=\"typping-msg mb-2\">{typingMember ? `${typingMember.member_fname} ${typingMember.member_lname} is typing...` : ''}</div>\n            <div className=\"replay-box\">\n                <div className={replyTo ? \"reply-chat\" : 'd-none'}>\n                    <span className=\"close-button\" onClick={() => { setReplyTo(undefined); setIsReplyClicked(preValue => !preValue); }}><a><FontAwesomeIcon icon={faClose} /></a></span>\n                    <span>Replying to:</span>\n                    <h5>{replyTo?.reply_of_member_fname} {replyTo?.reply_of_member_lname}</h5>\n                    <div className=\"input-reply-chat\" dangerouslySetInnerHTML={{ __html: (replyTo?.reply_of_content ?? '') }}></div>\n                </div>\n                <div\n                    ref={inputDiv}\n                    className=\"input-reply-area\"\n                    contentEditable\n                    onKeyDown={handleTextInputKeyDown}\n                    onKeyUp={handleTextInputKeyUp}\n                />\n                <div className=\"replay-action d-flex align-items-center justify-content-between\">\n                    <div className=\"left-blok d-flex\">\n                        <div className=\"upload-file cursor-pointer\">\n                            <div className=\"align-items-center d-flex\">\n                                <input ref={inputFileRef} type=\"file\" id=\"file_input\" accept=\"image/*,video/*,.pdf,.doc,.docx,.txt,.ppt,.xls,.csv\" onClick={() => { if (inputFileRef.current) inputFileRef.current.value = '' }} multiple onChange={sendFiles} />\n                                <span><FontAwesomeIcon icon={faPlus} /></span>\n                                <label htmlFor=\"file_input\">Upload Image</label>\n                            </div>\n                        </div>\n                        <div className=\"action-outer\">\n                            <div className=\"action-smile\" onClick={handleShowPicker} ref={pickerButtonRef}>\n                                <img src={require(\"../../../../assets/images/chat/smile.png\")} alt=\"Emoji\" />\n                            </div>\n                            <div className={showEmoji ? \"smile-outer\" : \"d-none\"} ref={emojiPickerRef}>\n                                <div className=\"emojipicker-wrapper\">\n                                    <EmojiPicker skinTonesDisabled={true} lazyLoadEmojis={false} onEmojiClick={selectEmoji} />\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                    <div className=\"right-block\">\n                        <button className=\"btn btn-action-send\" onClick={sendData}>\n                            Send<span className=\"icon\"><img src={require(\"../../../../assets/images/chat/paper-airplane.png\")} alt=\"Send\" /></span>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n","import { getUserData } from \"../../../utils/Utils\";\nimport { useEffect, useRef, useState } from \"react\";\nimport { MemberInterface, MessageInterface, RoomInterface, replyInterface } from \"../../../types/GroupChatInterfaces\";\nimport { ListMembers } from \"./Components/ListMembers\";\nimport { ListMessages } from \"./Components/ListMessages\";\nimport { ListRooms } from \"./Components/ListRooms\";\nimport { SendMessage } from \"./Components/SendMessage\";\nimport \"../../../components/chatDesign/ChatDesign.scss\";\nimport { useParams } from 'react-router-dom';\nimport { useSocket } from \"../../../contexts/SocketContext\";\nimport { MODAL_TYPES, useGlobalModalContext } from \"../../../utils/GlobalModal\";\n\nconst user = getUserData(\"userData\");\n\nconst GroupChat = () => {\n    const { roomId } = useParams();\n    const room_id = Number(roomId);\n    const [members, setMembers] = useState<MemberInterface[]>([]);\n    const [messages, setMessages] = useState<MessageInterface[]>([]);\n    const [rooms, setRooms] = useState<RoomInterface[]>([]);\n    const { socket, isConnected } = useSocket();\n    const [replyTo, setReplyTo] = useState<replyInterface>();\n    const handleSetReplyTo = (message: MessageInterface) => {\n        const insertOfReplyTo: replyInterface = {\n            reply_of_message_id: message.message_id,\n            reply_of_member_id: message.member_id,\n            reply_of_member_fname: message.member_fname,\n            reply_of_member_lname: message.member_lname,\n            reply_of_content: message.content,\n            reply_of_file: message.file\n        };\n\n        setReplyTo(insertOfReplyTo);\n    };\n    const [showLoader, setShowLoader] = useState<boolean>(false);\n    const replyAreaRef = useRef<HTMLDivElement>(null);\n    const chatAreaBlockRef = useRef<HTMLDivElement>(null);\n    const [height, setHeight] = useState<number>(0);\n    const [maxHeight, setMaxHeight] = useState<number>(0);\n\n    useEffect(() => {\n        if (chatAreaBlockRef.current) {\n            chatAreaBlockRef.current.style.paddingBottom = `${height}px`;\n        }\n    }, [height]);\n\n    useEffect(() => {\n        setReplyTo(undefined);\n    }, [room_id]);\n\n    const [replyAreaHeight, setReplyAreaHeight] = useState<number>(0);\n\n    useEffect(() => {\n        if (replyAreaRef.current) {\n            setHeight(replyAreaRef.current.clientHeight);\n        }\n\n        const updateMaxHeight = () => {\n            const windowHeight = window.innerHeight;\n            const maxHeightValue = windowHeight - 300;\n            setMaxHeight(maxHeightValue);\n        };\n\n        updateMaxHeight();\n        window.addEventListener(\"resize\", updateMaxHeight);\n\n        return () => {\n            window.removeEventListener(\"resize\", updateMaxHeight);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (socket?.connected) {\n            socket.on('rooms', (rooms: RoomInterface[]) => {\n                setRooms(rooms);\n            });\n\n            socket.on('roomMembers', (members: MemberInterface[]) => {\n                setMembers(members.filter(member => member.member_id != user?.Member_id));\n            });\n        } else {\n            setRooms([]);\n            setMessages([]);\n            setMembers([]);\n            return;\n        }\n\n        return () => {\n            socket.off('rooms');\n            socket.off('roomMembers');\n        };\n    }, [isConnected]);\n\n    const sendMessage = (message: string) => {\n        message = message.replace(/\\n+$/, '').trim();\n\n        if (message && socket) {\n            socket.emit(\"roomMessage\", {\n                room_id: room_id,\n                message: message,\n                reply_of: replyTo\n            });\n\n            setReplyTo(undefined);\n        }\n    };\n\n    const deleteMessage = (message_id: string) => {\n        if (socket) {\n            socket.emit('deleteMessage', {\n                room_id, message_id\n            });\n        }\n    }\n\n    const smallDeviceWidth = 767;\n    const [showUsers, setShowUsers] = useState(window.innerWidth < smallDeviceWidth ? false : true);\n    const handleshowUsers = () => {\n        if (window.innerWidth < smallDeviceWidth) {\n            setShowUsers(!showUsers);\n        }\n    }\n\n    useEffect(() => {\n        let overlayDiv: HTMLDivElement | null;\n\n        if (window.location.pathname === `/group-chat/${roomId}`) {\n            if (window.innerWidth < smallDeviceWidth) {\n                if (showUsers) {\n                    document.body.classList.add('blur-bg');\n                    overlayDiv = document.createElement('div');\n                    overlayDiv.className = 'overlay';\n                    document.body.insertAdjacentElement('afterbegin', overlayDiv);\n                    overlayDiv?.addEventListener('click', handleshowUsers);\n                } else {\n                    document.body.classList.remove('blur-bg');\n                    overlayDiv = document.querySelector('.overlay');\n                    if (overlayDiv) {\n                        overlayDiv.remove();\n                    }\n                }\n            }\n        }\n        else {\n            overlayDiv = document.querySelector('.overlay');\n\n            if (overlayDiv) {\n                overlayDiv.remove();\n            }\n        }\n    }, [showUsers]);\n\n    useEffect(() => {\n        window.scrollTo(0, 0);\n    }, []);\n    const [isReplyClicked, setIsReplyClicked] = useState<boolean>(false);\n\n    const { showModal } = useGlobalModalContext();\n\n    useEffect(() => {\n        const memberType = user?.Member_type;\n\n        if (!memberType) {\n            showModal(MODAL_TYPES.MEMBERSHIP_MODAL);\n        }\n    }, []);\n\n    return (\n        <div className=\"chat-container\">\n            <div className=\"container-fluid\">\n                <div className=\"row\">\n                    <ListMembers toggleList={showUsers} members={members} />\n                    <div className=\"chat-block-wrapper\">\n                        <div className=\"chat-block\">\n                            <ListRooms setShowLoader={setShowLoader} messages={messages} setMessages={setMessages} roomId={String(room_id)} rooms={rooms} members={members} handleshowUsers={handleshowUsers} />\n                            <div className=\"chat-section-wrap\">\n                                <ListMessages replyAreaHeight={replyAreaHeight} showLoader={showLoader} setShowLoader={setShowLoader} setIsReplyClicked={setIsReplyClicked} roomId={room_id} setMessages={setMessages} maxHeight={maxHeight} chatAreaBlockRef={chatAreaBlockRef} messages={messages} deleteMessage={deleteMessage} handleSetReplyTo={handleSetReplyTo} />\n                                <SendMessage setReplyAreaHeight={setReplyAreaHeight} setShowLoader={setShowLoader} setIsReplyClicked={setIsReplyClicked} isReplyClicked={isReplyClicked} roomId={room_id} replyAreaRef={replyAreaRef} sendTextMessage={sendMessage} replyTo={replyTo} setReplyTo={setReplyTo} />\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default GroupChat;\n"],"names":["CustomSlider","forwardRef","props","ref","settings","items","className","isVideo","modal","setModal","useState","videoUrl","setVideoUrl","undefined","videoTitle","setTitle","embedUrl","setEmbededUrl","toggle","playVideo","video","title","navigate","useNavigate","_jsxs","children","_jsx","Slider","map","item","index","concat","active","onClick","clickCallback","room_id","thumbnail","src","alt","FontAwesomeIcon","icon","faPlay","controls","playsInline","isLink","url","Link","to","image","state","chandlery_id","partner_id","target","text","details","Modal","isOpen","centered","ModalBody","ModalHeader","Heading","tag","ReactPlayer","_ref","onSearch","query","setQuery","type","value","onChange","e","placeholder","faSearch","ListMembers","members","toggleList","search","setSearch","userData","getUserData","id","length","SearchBar","Member_id","members_profile_picture","require","filter","member","member_fname","toLowerCase","includes","member_lname","member_id","member_profile_picture","process","user","socketUrl","baseUrl","ListMessages","_pinnedMessage$conten","replyAreaHeight","showLoader","setShowLoader","setIsReplyClicked","roomId","handleSetReplyTo","chatAreaBlockRef","maxHeight","socket","useSocket","showModal","useGlobalModalContext","chatAreaInner","useRef","scrollToBottomRef","messageRefs","messages","setMessages","selectedMessage","setSelectedMessage","pinnedMessage","setPinnedMessage","hasLoadMessages","setHasLoadMessages","isLoadMessages","setIsLoadMessages","isModerator","setIsModerator","showEditReactionMsgId","setShowEditReactionMsgId","emojiMessageId","setEmojiMessageId","reactions","setReactions","selectedReactionId","setSelectedReactionId","openedImage","setOpenedImage","showDeleteMessageModal","messageId","MODAL_TYPES","CONFIRM_MODAL","confirmBtn","deleteMessage","message_id","emit","useEffect","current","style","window","innerHeight","display","scrollToMessage","element","scrollIntoView","behavior","connected","offset","scrollInterval","setInterval","newElement","clearInterval","handleUnpinMessage","on","messageData","prevMessages","reverse","message","self","findIndex","msg","sort","a","b","loadReactions","pinnedMsg","find","_ref2","is_moderator","data","setReaction","reaction","prevReactions","newReactions","emoji_id","newReaction","setTimeout","scrollToBottom","off","downloadFile","name","file","axios","post","responseType","then","response","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","body","appendChild","click","remove","catch","error","console","scrollTo","top","scrollHeight","scrollTop","clientHeight","block","imageExtensions","videoExtensions","getFormattedMessage","html","_message$content$spli","fileExtension","content","split","pop","onDoubleClick","width","faFile","fontSize","emoji_replaced","replaceEmojis","whiteSpace","dangerouslySetInnerHTML","__html","twemoji","parse","folder","ext","base","bottom","marginTop","handleSetEdit","messageElement","getElementById","button","editButton","classList","add","images","getElementsByTagName","i","_imgNode$parentNode","altText","imgNode","textNode","createTextNode","parentNode","replaceChild","replaceImgToEmojis","contentEditable","focus","range","createRange","selection","getSelection","selectNodeContents","collapse","removeAllRanges","addRange","handleResetEdit","arguments","_messages$find","messageObject","innerHTML","handleSaveEdit","editedText","innerText","trim","edited_text","editMessage","handleReactionClick","emojiData","emoji","unified","handleSetEmojiMessageId","currentReaction","reaction_id","push","handleMouseDown","event","emoji_picker","emoji_picker_btn","contains","addEventListener","removeEventListener","messageIds","closest","messageDate","_Fragment","faClose","faThumbTack","onScroll","handleMessageScroll","_message$reply_of_con","_Object$keys","_reactions$message$me","date","Date","timestamp","timeString","toLocaleTimeString","hour","minute","hour12","dateString","toLocaleDateString","day","month","year","replace","faDownload","faEdit","faTrashCan","faReply","reply_of","reply_of_file","reply_of_content","reply_of_member_fname","reply_of_member_lname","handlePinMessage","handleSetShowEditReactionMsgId","preValue","EmojiPicker","lazyLoadEmojis","skinTonesDisabled","onEmojiClick","clickEditReaction","Object","keys","emojiId","_reactions$message$me2","_reactions$message$me3","_reactions$message$me4","handleReactionDetails","draggable","faEllipsis","allowExpandReactions","reactionsDefaultOpen","onReactionClick","faLongArrowAltDown","ListRooms","rooms","handleshowUsers","sliderRef","_activeElement$parent","_activeElement$parent2","activeElement","querySelector","_sliderRef$current","currentIndex","parentElement","dataset","totalIndex","querySelectorAll","slickGoTo","_sliderRef$current2","matchMedia","matches","slides","room","room_name","word","charAt","toUpperCase","slice","join","formatRoomNames","room_image","location","origin","sliderClass","dots","infinite","slidesToShow","slidesToScroll","variableWidth","centerPadding","responsive","breakpoint","arrows","SendMessage","_replyTo$reply_of_con","setReplyAreaHeight","isReplyClicked","sendTextMessage","setReplyTo","replyTo","replyAreaRef","isConnected","showEmoji","setShowEmoji","inputFileRef","sendData","inputDiv","typingMember","setTypingMember","typingTimeout","emojiPickerRef","pickerButtonRef","onKeyDown","key","shiftKey","preventDefault","clearTimeout","onKeyUp","handleTextInputKeyUp","accept","multiple","files","filesData","Array","from","forEach","reader","FileReader","onload","file_data","result","original_name","readAsArrayBuffer","faPlus","htmlFor","handleShowPicker","getBoundingClientRect","GroupChat","useParams","Number","setMembers","setRooms","height","setHeight","setMaxHeight","paddingBottom","updateMaxHeight","windowHeight","showUsers","setShowUsers","innerWidth","overlayDiv","_overlayDiv","pathname","insertAdjacentElement","Member_type","MEMBERSHIP_MODAL","String","insertOfReplyTo","reply_of_message_id","reply_of_member_id"],"sourceRoot":""}