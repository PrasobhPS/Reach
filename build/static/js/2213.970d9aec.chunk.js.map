{"version":3,"file":"static/js/2213.970d9aec.chunk.js","mappings":"iOA8BA,MAwGA,EAxGoBA,KAClB,MACMC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,IAAY,YAC7B,IAAIC,EAAa,GACbC,EAAQ,GACZ,IACmB,OAAbH,IACFG,EAAQH,EAASI,MACjBF,EAAaF,EAASK,YAG1B,CAAE,MAAOC,GACPC,QAAQD,MAAM,2BAA4BA,EAC5C,CACA,MAAM,UAAEE,IAAcC,EAAAA,EAAAA,OAQfC,EAAYC,IAAiBC,EAAAA,EAAAA,UAAsB,KACnDC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IAMpCG,IAAsBC,EAAAA,EAAAA,MAwBvBC,GAAiBC,EAAAA,EAAAA,IAAYC,EAAAA,IAgCnC,OA9BAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,GAAmBJ,GAAkB,IAAIK,KAAKC,IAQnD,OACCC,GAAID,EAAKC,GACTC,MAAOF,EAAKG,wBAAuB,GAAAC,OAlEvBC,qCAkEoC,KAAAD,OAAIJ,EAAKG,yBAA4B,GACrFG,MAAM,GAADF,OAAKJ,EAAKO,cAAa,KAAAH,OAAIJ,EAAKQ,eACrCC,SAAUT,EAAKU,mBACfC,OAAQX,EAAKY,aACbC,SAAU,GACVC,KA9CmBC,EA8CAf,EAAKgB,kBA7CrBD,EACEA,EAAIE,QAAQ,kBAAmB,IADrB,KADIF,KA+CnB,IAEF3B,EAAcU,EAAgB,GAC7B,CAACJ,KAGJG,EAAAA,EAAAA,YAAU,KA5CqBqB,WAC7B3B,GAAa,GACb,IACE,MAAM4B,QAAiB3B,EAAmBZ,GAC1C,GAAI,UAAWuC,EACb,MAAM,IAAIC,MAAM,mCAGlB,MAAMC,QAAaF,EAASE,KAAKA,KAEjC9C,GAAS+C,EAAAA,EAAAA,IAAc,CAAEC,KAAMF,IAEjC,CAAE,MAAOtC,GAET,CAAC,QACCQ,GAAa,EACf,GA8BAiC,EAAwB,GACvB,KAKDC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC/BC,EAAAA,EAAAA,KAACC,EAAAA,EAAS,CAACC,MAAO,MAClBF,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kDAAiDC,UAC9DC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,gBAAeC,UAC5BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,MAAKC,SACjBxC,EAAWY,KAAKgC,IACfH,EAAAA,EAAAA,KAAA,OAAKF,UAAU,iBAAgBC,UAC7BC,EAAAA,EAAAA,KAACI,EAAAA,EAAS,CAACX,KAAMU,EAAWE,OAAM,wBAAA7B,OAA0B2B,EAAU9B,OADnC8B,EAAU9B,cAOnD,C","sources":["pages/Specialists.tsx"],"sourcesContent":["import { CmsHeader } from \"../components/CmsHeader/CmsHeader\";\nimport { VideoCard } from \"../components/VideoCard/VideoCard\";\nimport { useSpecialistMutation } from \"../features/Specialist/SpecialistApiSlice\";\nimport { useEffect, useState } from \"react\";\nimport { getUserData } from \"../utils/Utils\";\nimport { MODAL_TYPES, useGlobalModalContext } from \"../utils/GlobalModal\";\nimport { selectSpecialist, setSpecialist } from \"../features/Specialist/SpecialistSlice\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\ninterface VideoData {\n  id: number;\n  image: string;\n  title: string;\n  subtitle: string;\n  bio?: string;\n  videos: number | '';\n  location: string | '';\n  videoUrl: string | '';\n}\n\ninterface Specialist {\n  id: number;\n  members_profile_picture: string;\n  members_fname: string;\n  members_lname: string;\n  members_employment: string;\n  total_videos: number;\n  members_biography: string\n}\n\nconst Specialists = () => {\n  const baseUrl = process.env.REACT_APP_STORAGE_URL;\n  const dispatch = useDispatch();\n  const userData = getUserData(\"userData\");\n  let memberType = \"\";\n  let token = \"\";\n  try {\n    if (userData !== null) {\n      token = userData.Token;\n      memberType = userData.Member_type;\n    } else {\n    }\n  } catch (error) {\n    console.error(\"Error parsing user data:\", error);\n  }\n  const { showModal } = useGlobalModalContext();\n  const memberModal = () => {\n    showModal(MODAL_TYPES.MEMBERSHIP_MODAL);\n  };\n  // useEffect(() => {\n  //   if (!memberType) memberModal();\n  // }, []);\n\n  const [videodatas, setVideodatas] = useState<VideoData[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const stripHtmlTags = (str: string) => {\n    if (!str) return '';\n    return str.replace(/<\\/?[^>]+(>|$)/g, \"\");\n  };\n  const [specialistMutation] = useSpecialistMutation();\n\n\n\n  // Function to fetch specialist list from the API\n  const fetchSpecialistFromAPI = async () => {\n    setIsLoading(true);\n    try {\n      const response = await specialistMutation(token);\n      if (\"error\" in response) {\n        throw new Error(\"Failed to fetch specialist list\");\n      }\n\n      const data = await response.data.data;\n\n      dispatch(setSpecialist({ list: data }));\n\n    } catch (error) {\n\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const specialistList = useSelector(selectSpecialist);\n\n  useEffect(() => {\n    const transformedData = (specialistList || []).map((item: {\n      id: number;\n      members_profile_picture: string;\n      members_fname: string;\n      members_lname: string;\n      members_employment: string;\n      total_videos: number;\n      members_biography: string\n    }) => ({\n      id: item.id,\n      image: item.members_profile_picture ? `${baseUrl}/${item.members_profile_picture}` : '',\n      title: `${item.members_fname} ${item.members_lname}`,\n      subtitle: item.members_employment,\n      videos: item.total_videos,\n      location: '', // Set location if available\n      bio: stripHtmlTags(item.members_biography),\n    }));\n\n    setVideodatas(transformedData);\n  }, [specialistList]);\n\n\n  useEffect(() => {\n    // if (!memberType) memberModal();\n    fetchSpecialistFromAPI();\n  }, []);\n\n\n\n  return (\n    <div className=\"specialists-page\">\n      <CmsHeader links={[]}></CmsHeader>\n      <div className=\"specialists-video-list specialist-videopagelist\">\n        <div className=\"box-container\">\n          <div className=\"row\">\n            {videodatas.map((videoData) => (\n              <div className=\"col-md-4 col-6\" key={videoData.id}>\n                <VideoCard data={videoData} target={`/specialists-details/${videoData.id}`} />\n              </div>\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Specialists;\n"],"names":["Specialists","dispatch","useDispatch","userData","getUserData","memberType","token","Token","Member_type","error","console","showModal","useGlobalModalContext","videodatas","setVideodatas","useState","isLoading","setIsLoading","specialistMutation","useSpecialistMutation","specialistList","useSelector","selectSpecialist","useEffect","transformedData","map","item","id","image","members_profile_picture","concat","process","title","members_fname","members_lname","subtitle","members_employment","videos","total_videos","location","bio","str","members_biography","replace","async","response","Error","data","setSpecialist","list","fetchSpecialistFromAPI","_jsxs","className","children","_jsx","CmsHeader","links","videoData","VideoCard","target"],"sourceRoot":""}