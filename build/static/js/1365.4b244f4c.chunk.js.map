{"version":3,"file":"static/js/1365.4b244f4c.chunk.js","mappings":"iSAiBO,MAAMA,EAAgBA,KACzB,MAAMC,EAAUC,uBAEVC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,OACVC,EAAOC,IAAYC,EAAAA,EAAAA,UAAwB,OAC3CC,EAAWC,IAAgBF,EAAAA,EAAAA,WAAS,IACpCG,EAAWC,IAAgBJ,EAAAA,EAAAA,UAAiB,KAC5CK,IAAeC,EAAAA,EAAAA,OAEfC,EAAOC,IAAYR,EAAAA,EAAAA,WAAS,IAC5BS,EAAeC,IAAoBV,EAAAA,EAAAA,WAAS,IACnDW,EAAAA,EAAAA,YAAU,KACFC,OAAOC,YAAc,MAAQJ,IAC7BD,GAAS,GACTE,GAAiB,GACrB,GACD,CAACD,IAEH,MAAMK,EAASA,KACZN,GAAS,EAAM,GAGnBG,EAAAA,EAAAA,YAAU,KACN,MACMI,EADS,IAAIC,gBAAgBpB,EAASqB,QAClBC,IAAI,SAC1BH,GACAhB,EAASgB,EACb,GACD,CAACnB,KA8CJe,EAAAA,EAAAA,YAAU,KACFb,GA7CgBqB,WACpBjB,GAAa,GACb,MAAMkB,EAAY,CACdtB,MAAOA,GAELuB,QAAiBhB,EAAYe,GAC/B,UAAWC,GACXnB,GAAa,GACboB,IAAAA,KAAU,CACNC,MAAO,0BACPC,KAAM,GACNC,KAAM,UACNC,MAAO,IACPC,mBAAmB,EACnBC,SAAS,wHAMTC,WAAY,SAGhBC,YAAW,KACPpC,EAAS,IAAI,GACd,MAE6B,qBAA5B2B,EAASU,KAAKC,WACVxC,IACAoB,OAAOhB,SAASqC,KAAOzC,GAE3BsC,YAAW,KACPlB,OAAOhB,SAASqC,KA7DZxC,qBA6DoC,GACzC,MAEHqC,YAAW,KACPpC,EAAS,IAAI,GACd,IAKX,EAIIwC,EACJ,GACD,CAACpC,IAMJ,OACIqC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,oCAAmCC,SAAA,EAE9CC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,YAAWC,UACtBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,MAAKC,UAChBC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,sBAAqBC,UAChCF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,qBAAoBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,kBAAiBC,UAC5BC,EAAAA,EAAAA,KAACC,EAAAA,EAAe,CAACd,KAAMe,EAAAA,SAE3BL,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,wBACJC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,eAAcC,UACzBF,EAAAA,EAAAA,MAAA,QAAAE,SAAA,CAAM,cAAYlC,EAAU,uGAShCmC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0BASlCD,EAAAA,EAAAA,MAACM,EAAAA,EAAK,CACHC,OAAQnC,EACRO,OAAQA,EAER6B,MAAM,EACPC,eAAe,eAAcP,SAAA,EAE5BC,EAAAA,EAAAA,KAACO,EAAAA,EAAW,CAAC/B,OAAQA,EAAOuB,UACxBF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,mBAAkBC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,iBACHC,EAAAA,EAAAA,KAACQ,EAAAA,EAAM,CACHC,QAASA,KA7C1BvD,IACHoB,OAAOhB,SAASqC,KAAOzC,EA4C2B,EAC9BgC,KAAK,OACLC,MAAM,EACNuB,MAAM,OACNZ,UAAU,yBAKtBE,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CAAAZ,UACNC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAGrB,EAGd,G","sources":["features/MemberSignup/EmailVerified.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport \"./Emailverification.scss\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCheck } from \"@fortawesome/free-solid-svg-icons\";\nimport { Button } from \"../../components/Button/Button\";\nimport { Modal, ModalBody, ModalHeader } from \"reactstrap\";\nimport { useLocation, useNavigate, useParams } from \"react-router-dom\";\nimport Swal from \"sweetalert2\";\nimport { useEmailVerifyMutation } from \"../Login/authApiSlice\";\nimport { setUserData } from \"../../utils/Utils\";\ndeclare global {\n    interface Window {\n        ReactNativeWebView?: {\n            postMessage: (message: string) => void;\n        };\n    }\n}\nexport const EmailVerified = () => {\n    const appLink = process.env.REACT_APP_LINK_URL;\n    const fallbackUrl = process.env.REACT_APP_FALLBACK_URL;\n    const navigate = useNavigate();\n    const location = useLocation();\n    const [token, setToken] = useState<string | null>(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [userEmail, setUserEmail] = useState<string>('');\n    const [emailVerify] = useEmailVerifyMutation();\n\n    const [modal, setModal] = useState(false);\n    const [isModalOpened, setIsModalOpened] = useState(false);\n    useEffect(() => {\n        if (window.innerWidth <= 768 && !isModalOpened) {\n            setModal(true);\n            setIsModalOpened(true); // Mark modal as opened\n        }\n    }, [isModalOpened]);\n\n     const toggle = () => {\n        setModal(false);\n    };\n\n    useEffect(() => {\n        const params = new URLSearchParams(location.search);\n        const tokenParam = params.get(\"token\");\n        if (tokenParam) {\n            setToken(tokenParam);\n        }\n    }, [location]);\n\n    const fetchTokenExist = async () => {\n        setIsLoading(true);\n        const checkData = {\n            token: token,\n        };\n        const userData = await emailVerify(checkData);\n        if (\"error\" in userData) {\n            setIsLoading(false);\n            Swal.fire({\n                title: \"Email Already Verified!\",\n                text: '',\n                icon: \"warning\",\n                timer: 3000,\n                showConfirmButton: false,\n                backdrop: `\n          rgba(255, 255, 255, 0.5)\n          left top\n          no-repeat\n          filter: blur(5px);\n        `,\n                background: '#fff',\n            });\n\n            setTimeout(() => {\n                navigate(\"/\");\n            }, 3000);\n        } else {\n            if (userData.data.tokenName === 'authToken_mobile') {\n                if (appLink)\n                    window.location.href = appLink;\n\n                setTimeout(() => {\n                    window.location.href = fallbackUrl || \"\";\n                }, 2000);\n            } else {\n                setTimeout(() => {\n                    navigate(\"/\");\n                }, 3000);\n            }\n            // const newLocalData = userData.data.data;\n            // setUserEmail(newLocalData.members_email);\n            // setUserData(newLocalData);\n        }\n    }\n    useEffect(() => {\n        if (token) {\n            fetchTokenExist();\n        }\n    }, [token]);\n\n    const handleSubmit = () => {\n       if (appLink)\n        window.location.href = appLink;\n    }\n    return (\n        <div className=\"EmailVerified-parent verifiedpage\">\n\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12 col-sm-12\">\n                        <div className=\"Email-verifiedPage\">\n                            <div className=\"message-iconbox\">\n                                <FontAwesomeIcon icon={faCheck} />\n                            </div>\n                            <div className=\"text-content\">\n                                <h1>Email is Verified!</h1>\n                                <div className=\"content-para\">\n                                    <span>Your email {userEmail} has been successfully verified. You can now go back to the login page to access the platform.</span>\n                                </div>\n                                {/* <Button\n                                    onClick={() => handleSubmit()}\n                                    text=\"Go to the App\"\n                                    icon={true}\n                                    theme=\"light\"\n                                    className=\"w-100 send-action\"\n                                /> */}\n                                <div className=\"dont-get\">\n                                    {/* <a href=\"#\">Don't get e-mail ? <span className=\"text-pink\">Send it again</span></a> */}\n                                </div>\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n             <Modal\n                isOpen={modal}\n                toggle={toggle}\n               \n                fade={false}\n               modalClassName=\"bottom-modal\"\n            >\n                <ModalHeader toggle={toggle}>\n                    <div className=\"bottom-modalview\">\n                        <p>view in app</p>\n                        <Button\n                            onClick={() => handleSubmit()}\n                            text=\"Open\"\n                            icon={true}\n                            theme=\"dark\"\n                            className=\"w-100 open-app\"\n                        />\n                    </div>\n                    \n                </ModalHeader>\n                <ModalBody>\n                    <div className=\"video-player\"></div>\n                </ModalBody>\n            </Modal>\n        </div>\n    )\n}\nexport default EmailVerified;"],"names":["EmailVerified","appLink","process","navigate","useNavigate","location","useLocation","token","setToken","useState","isLoading","setIsLoading","userEmail","setUserEmail","emailVerify","useEmailVerifyMutation","modal","setModal","isModalOpened","setIsModalOpened","useEffect","window","innerWidth","toggle","tokenParam","URLSearchParams","search","get","async","checkData","userData","Swal","title","text","icon","timer","showConfirmButton","backdrop","background","setTimeout","data","tokenName","href","fetchTokenExist","_jsxs","className","children","_jsx","FontAwesomeIcon","faCheck","Modal","isOpen","fade","modalClassName","ModalHeader","Button","onClick","theme","ModalBody"],"sourceRoot":""}