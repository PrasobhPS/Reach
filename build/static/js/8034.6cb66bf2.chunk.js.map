{"version":3,"file":"static/js/8034.6cb66bf2.chunk.js","mappings":"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","sources":["features/ResetPassword/ResetPasswordApiSlice.tsx","features/ResetPassword/ResetPassword.tsx","pages/PasswordReset.tsx"],"sourcesContent":["import { apiSlice } from \"../../app/apiSlice\";\n\nexport const resetPasswordApiSlice = apiSlice.injectEndpoints({\n  endpoints: (builder) => ({\n    resetPassword: builder.mutation({\n      query: (userData) => ({\n        url: \"/resetPassword\",\n        method: \"POST\",\n        body: { ...userData },\n      }),\n    }),\n    checkTokenExists: builder.mutation({\n      query: checkData => {\n        return ({\n          url: \"/checkTokenExists\",\n          method: \"POST\",\n          body: checkData,\n        })\n      },\n    }),\n  }),\n  overrideExisting: true,\n});\n\nexport const { useResetPasswordMutation, useCheckTokenExistsMutation } = resetPasswordApiSlice;\n","import React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport { Heading } from \"../../components/Heading/Heading\";\nimport { FormProvider, useForm } from \"react-hook-form\";\nimport { Button } from \"../../components/Button/Button\";\nimport CustomInput from \"../../components/CustomInput/CustomInput\";\nimport \"./ResetPassword.scss\";\nimport { useResetPasswordMutation, useCheckTokenExistsMutation } from \"./ResetPasswordApiSlice\";\nimport { FetchBaseQueryError } from \"@reduxjs/toolkit/dist/query/react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEye, faEyeSlash } from \"@fortawesome/free-regular-svg-icons\";\nimport Swal from \"sweetalert2\";\ninterface formValues {\n  members_email: string;\n  new_password: string;\n  new_password_confirmation: string;\n  token: string | null;\n}\n\nexport const ResetPassword = () => {\n  const [showPassword, setShowPassword] = useState<boolean>(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState<boolean>(false);\n  const passwordPattern = /^(?=.*\\d)[A-Za-z\\d@$!%*?&]{8,}$/;\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFocus, setIsCpasswordFocused] = useState(false);\n  const location = useLocation();\n  const navigate = useNavigate();\n  const [token, setToken] = useState<string | null>(null);\n  useEffect(() => {\n    const params = new URLSearchParams(location.search);\n    const tokenParam = params.get(\"token\");\n    if (tokenParam) {\n      setToken(tokenParam);\n    }\n  }, [location]);\n  const form = useForm<formValues>();\n  const { register, control, handleSubmit, formState, watch } = form;\n  const { errors } = formState;\n  const [errorMessage, setErrorMsg] = useState(\"\");\n  const [successMessage, setSuccessMessage] = useState(\"\");\n  const [resetPasswordMutation] = useResetPasswordMutation();\n  const [checkTokenExists] = useCheckTokenExistsMutation();\n  const [shouldNavigate, setShouldNavigate] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const fetchTokenExist = async () => {\n    setIsLoading(true);\n    const checkData = {\n      token: token,\n    };\n    const tokenData = await checkTokenExists(checkData);\n    if (\"error\" in tokenData) {\n      setIsLoading(false);\n      Swal.fire({\n        title: \"Token Expired!\",\n        text: '',\n        icon: \"warning\",\n        timer: 3000,\n        showConfirmButton: false,\n        backdrop: `\n      rgba(255, 255, 255, 0.5)\n      left top\n      no-repeat\n      filter: blur(5px);\n    `,\n        background: '#fff',\n      });\n\n      setTimeout(() => {\n        navigate(\"/\");\n      }, 3000);\n    } else {\n      setIsLoading(false);\n    }\n  }\n  useEffect(() => {\n    if (token) {\n      fetchTokenExist();\n    }\n  }, [token]);\n\n  const onSubmit = async (data: formValues) => {\n    data.token = token;\n    setIsLoading(true);\n    const userData = await resetPasswordMutation(data);\n    // let errorMessage: string = \"\";\n    if (\"error\" in userData) {\n      console.error(\"Error logging in:\", userData.error);\n      if (typeof userData.error === \"string\") {\n        setErrorMsg(userData.error); // Assign the error message if it's already a string\n      } else {\n        const fetchError = userData.error as FetchBaseQueryError; // Type assertion\n        if (\n          fetchError.data &&\n          typeof fetchError.data === \"object\" &&\n          \"error\" in fetchError.data &&\n          typeof fetchError.data.error === \"string\"\n        ) {\n          setErrorMsg(fetchError.data.error);\n        } else {\n          setErrorMsg(\"An error occurred\"); // Handle cases where error property doesn't exist\n        }\n      }\n      setSuccessMessage(\"\");\n      setIsLoading(false);\n    } else {\n      setErrorMsg(\"\");\n\n      setShouldNavigate(true);\n      setIsLoading(false);\n      Swal.fire({\n        title: \"Password Reset!\",\n        text: 'Your password has been changed successfully. Use your new password to sign in.',\n        icon: \"success\",\n        timer: 3000,\n        showConfirmButton: false,\n        backdrop: `\n      rgba(255, 255, 255, 0.5)\n      left top\n      no-repeat\n      filter: blur(5px);\n    `,\n        background: '#fff',\n      });\n      setTimeout(() => {\n        navigate(\"/\");\n      }, 3000);\n    }\n  };\n\n  return (\n    <div className=\"reset-password\">\n\n      <Heading>Reset Password</Heading>\n      <p className=\"text-para\">Reset your password</p>\n      <div className=\"content-box\">\n        <FormProvider {...form}>\n          <form\n            className=\"login-field\"\n            onSubmit={handleSubmit(onSubmit)}\n            noValidate\n          >\n\n            <div className={`password-area position-relative ${isFocused ? 'focused' : ''}`}\n              onFocus={() => setIsFocused(true)}\n              onBlur={() => setIsFocused(false)}\n            >\n              <CustomInput\n                name=\"new_password\"\n                placeholder=\"New Password\"\n                type={showPassword ? \"text\" : \"password\"}\n                registerConfig={{\n                  required: {\n                    value: true,\n                    message: \"New password is required\",\n                  },\n                }}\n                className=\"input-block\"\n              />\n              <div className=\"icon\" onClick={() => setShowPassword(preValue => !preValue)}>\n                <FontAwesomeIcon icon={showPassword ? faEye : faEyeSlash} />\n              </div>\n            </div>\n            <div className={`password-area position-relative ${isFocus ? 'ConfirmPasswordfocused' : ''}`}\n              onFocus={() => setIsCpasswordFocused(true)}\n              onBlur={() => setIsCpasswordFocused(false)}\n            >\n              <CustomInput\n                name=\"new_password_confirmation\"\n                placeholder=\"Confirm Password\"\n                type={showConfirmPassword ? \"text\" : \"password\"}\n                registerConfig={{\n                  required: {\n                    value: true,\n                    message: \"Confirm password is required\",\n                  },\n                  validate: (val: string) => {\n                    if (watch(\"new_password\") != val) {\n                      return \"Passwords do not match\";\n                    }\n                  },\n                }}\n                className=\"input-block\"\n              />\n              <div className=\"icon\" onClick={() => setShowConfirmPassword(preValue => !preValue)}>\n                <FontAwesomeIcon icon={showConfirmPassword ? faEye : faEyeSlash} />\n              </div>\n            </div>\n\n            <div className=\"error\">{errorMessage}</div>\n            {isLoading ? (\n              <div>\n\n                <div className=\"page-loader\">\n                  <div className=\"page-innerLoader\">\n                    <div className=\"spinner-border\" role=\"status\">\n                      <img src={require(\"../../assets/images/cruz/Frame.png\")} alt=\"\" className=\"img-fluid\" />\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              \"\"\n            )}\n\n            <Button\n              onClick={() => console.log(\"Hello\")}\n              text=\"Update Password\"\n              icon={true}\n              theme=\"light\"\n              className=\"w-100\"\n            />\n          </form>\n        </FormProvider>\n      </div>\n\n    </div>\n  );\n};\n","import React from \"react\";\nimport { ResetPassword } from \"../features/ResetPassword/ResetPassword\";\n\nfunction PasswordReset() {\n  return (\n    <div className=\"row mx-0\">\n      <ResetPassword />\n    </div>\n  );\n}\n\nexport default PasswordReset;\n"],"names":["resetPasswordApiSlice","apiSlice","injectEndpoints","endpoints","builder","resetPassword","mutation","query","userData","url","method","body","checkTokenExists","checkData","overrideExisting","useResetPasswordMutation","useCheckTokenExistsMutation","ResetPassword","showPassword","setShowPassword","useState","showConfirmPassword","setShowConfirmPassword","isFocused","setIsFocused","isFocus","setIsCpasswordFocused","location","useLocation","navigate","useNavigate","token","setToken","useEffect","tokenParam","URLSearchParams","search","get","form","useForm","register","control","handleSubmit","formState","watch","errors","errorMessage","setErrorMsg","successMessage","setSuccessMessage","resetPasswordMutation","shouldNavigate","setShouldNavigate","isLoading","setIsLoading","async","Swal","title","text","icon","timer","showConfirmButton","backdrop","background","setTimeout","fetchTokenExist","_jsxs","className","children","_jsx","Heading","FormProvider","onSubmit","data","console","error","fetchError","noValidate","concat","onFocus","onBlur","CustomInput","name","placeholder","type","registerConfig","required","value","message","onClick","preValue","FontAwesomeIcon","faEye","faEyeSlash","validate","val","role","src","require","alt","Button","log","theme"],"sourceRoot":""}